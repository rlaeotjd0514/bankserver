[2020-04-19]
쓰레드를 고려하지 않은 코드를 session_pool.cpp에서 발견::
while (stop_ev_.wait_for(std::chrono::microseconds(100)) == std::future_status::timeout) {
	mtx.lock();
	size_t sl_sz = session_list.size();
	mtx.unlock();
	if (sl_sz > 0) {		
		thread client_thread([=]() {			
			mtx.lock();
			session* session_ptr_ = session_list.front();
			session_list.pop_front(); ----- *
			auto cli_ep = session_ptr_->cli_socket;
			mtx.unlock();
			tcp::socket client_handle = session_ptr_->accept_client(cli_ep);													
		});							
		client_thread.detach();
	}
}

위와 같은 코드가 있을 때 client_thread는 생성후 곧바로 detach되고 쓰레드가 만들어지는 조건이 sl_sz 즉, 세션 리스트에 세션이 하나라도 있다는 조건이다.

두 코드가 독립적으로 실행되므로 session_list.pop_front()코드가 동작하기 전에 sesion_list.size()를 조회한다면 팝 되기 전의 세션 리스트 사이즈가 조회 될 것이고

이후 생성되는 쓰레드에서는 pop_front()코드를 실행 할 때 이전과 같은 세션을 끌어오거나 최악의 경우, 비어있는 세션에서 pop_front코드를 실행해 서버가 멈추게 될 것이다.

다음 과제::세션/풀/리스너/트랜잭션 등의 각 동작에 대한 결과/에러 코드를 포함하는 헤더파일 작성



[2020-04-21]
이슈발생 :: accept already connected::

[2020-04-25]
0421 이슈 해결::acceptor에 전달하는 소켓은 무조건 비워서 전달할 것.
++이슈 발생 및 해결
이슈:세션을 생성한 뒤 세션이 정상적으로 해제되지 않는 문제 발견::
해결:세션정보를 옮길 때 복사가 일어나는데 해당 복사에서 타이머에 들어가는 람다식에 있는 this포인터가 그대로 복사되어 이미 해제된 세션에 있는 변수를 참조함

[2020-04-26]
0426~
DB작업중...

[2020-04-27]
ORACLE LINUX 8 -> 18c 설치 및 Oracle Developer 연결 성공

[2020-04-28]
깃허브 공부하기
오늘 작업한거 다 날리고 망함

[2020-04-29]
postgresql 연결 완료

[2020-05-02]
강원도 노예로 끌려감... 노트북은 가지고 감 그래도..