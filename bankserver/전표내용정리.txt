1. 클라 요청
2. 큐 진입
3. 차례가 오면 tspinfo를 배당
4. 전표내용 처리
5. 로그 기록

모든 트랜잭션은 생성과 동시에 고유 시드를 받음
현재도 다양한 요청 작업이 있고 앞으로도 추가될 것이지만 
트랜잭션은 모든 작업사항을 공통으로 묶을 수 있는 하나의 타입으로 작성하도록 함.
공통 트랜잭션 생성 요구사항::
(transaction::t_type type, pinfo s, pinfo r, unsigned long long amount, boost::asio::ip::tcp::endpoint loc, std::chrono::time_point<system_clock> req_t) {

트랜잭션 타입(작업종류)
트랜잭션 요청자 : 해당 작업 요청 고객
트랜잭션 대상자 : 해당 작업으로 영향을 받는 고객 리스트(수정해야됨)
변화량 : 재화 변화량
트랜잭션 요청 위치 : ipv4
트랜잭션 요청 시간


공통 헤더 시그니처 : JUDI

공통 헤더 푸터 : RYES

공통 바디 시그니처 : ALEC

공통 바디 푸터 : RSKI

요청 헤더::
0. 4바이트 : 헤더 시그니처
1. 2바이트 : 프로토콜 버전 ..0
2. 2바이트 : 요청 종류 [ 1 : 송수금 , 2 : 출금, 3 : 거래내역조회 ] ..2
3. 4바이트 : 푸터 시그니처

[송수금 / 출금] 요청 본문 전표
3. 26바이트 + 2바이트 : 수신자 고유번호 ..4
4. 26바이트 + 2바이트 : 송신자 or 대상자 고유번호 ..46
5. 32바이트 : 송금 / 출금 일 경우 : 금액 ..88
6. chrono::time_point<system_clock> 8바이트 : 요청 일시 ..120
7. uint32_t : 거래 요청 위치 ..128
8. 종료 문자 .. 160

[입출금] 요청 전표
1. 송수금과 동일
2. 송수금과 동일
3. 26바이트 + 16바이트 : 요청자 고유번호 ..4
4. 32바이트 : 금액 ..46
5. chrono::time_point<system_clock> 8바이트 : 요청일시 ...78
6. uint32_t : 거래 요청 위치 ..86
7. 종료 문자 ..118

[거래내역] 요청 전표
1. 송수금 동일
2. 송수금 동일
3. 26바이트 + 16바이트 : 요청자 고유번호 ..4
4. time 구조체 8바이트 : ..46
5. uint32_t : 거래 요청 위치 : ..54
6. 종료 문자 .. 86


[단일거래] 진행 순서 
1.클라측 : 거래 요청 [ 거래자 csp, 위치, 시간 전송 ]

-----요청 패킷-----
SGMK + 거래자 csp, 위치, 시간 
1-2 : ---큐진입---
2.서버측 : 거래 요청자 csp번호 확인 [ csp 조회 및 확인후, 트랜잭션 번호 전송 ]
이 후 모든 패킷 헤더시작에 트랜잭션 번호를 삽입하여 전송
클라 ~요청 전표 전송
서버 ~응답 전표 전송

3. 이후 통신 종료

세션은 매개변수 expire_time 을 가지며 해당 시간 이후(단위 : 초) 자동 소멸자 호출

총 업무::::
	통장업무::
	1. 입출금
	2. 송금 (계좌이체)
	3. 조회거래::거래내역조회
	4. 무통장입금(QR로 화폐를 만든 후 직접 구현)
	::5. 대출 상환

	수신업무::
	1. 통장개설/폐지

	여신업무::
	1. 대출
	2. 신용 등급 조회 (*)

